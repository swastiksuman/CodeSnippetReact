{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListOfSnippets","props","Table","striped","bordered","hover","listOfData","map","data","id","type","snippet","AddUpdateSnippet","Form","Group","controlId","Label","Control","placeholder","as","App","useState","setData","getData","e","a","axios","get","resp","console","log","useEffect","result","fetchData","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,sLCkC3C,SAASC,EAAeC,GACtB,OACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,4BACF,kCACA,oCACA,wCAGAJ,EAAMK,WAAWC,KAAI,SAACC,GAAD,OAAS,4BAC5B,4BAAKA,EAAKC,IACV,4BAAKD,EAAKE,MACV,4BAAKF,EAAKG,cAQhB,SAASC,EAAiBX,GACxB,OACE,kBAACY,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBACtB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcP,KAAK,OAAOQ,YAAY,kBAExC,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBACtB,kBAACF,EAAA,EAAKG,MAAN,yBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcE,GAAG,UACf,qCACA,uCACA,2CAMSC,MAlEf,SAAanB,GAAQ,IAAD,EACMoB,mBAAS,IADf,mBACXb,EADW,KACLc,EADK,KAGZC,EAAO,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACKC,IAAMC,IAAI,eADf,OACRC,EADQ,OAEdC,QAAQC,IAAIF,GACZN,EAAQM,EAAKpB,MAHC,2CAAH,sDAgBb,OAVAuB,qBAAU,YACO,uCAAG,4BAAAN,EAAA,sEACKC,IACnB,eAFc,OACVM,EADU,OAIhBV,EAAQU,EAAOxB,MAJC,2CAAH,qDAMfyB,KACC,IAGD,yBAAKC,UAAU,OACb,kBAAClC,EAAD,CAAgBM,WAAYE,IAC5B,kBAACI,EAAD,MACA,4BAAQuB,QAAS,SAACX,GAAKD,MAAvB,WCjBca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCLNC,IAASC,OAAO,kBAAC,EAAD,CAAKpC,WANF,CACf,CAAC,EAAG,IAAK,aACT,CAAC,EAAG,MAAO,eACX,CAAC,EAAG,OAAQ,mBAGgCqC,SAASC,eAAe,SDoHlE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.19f964d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Table, Form } from 'react-bootstrap';\nimport axios from 'axios';\n\nfunction App(props) {\n  const [data, setData] = useState([]);\n  \n  const getData = async e => {\n    const resp = await axios.get('/getCourses');\n    console.log(resp);\n    setData(resp.data);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        '/getCourses',\n      );\n      setData(result.data);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ListOfSnippets listOfData={data}></ListOfSnippets>\n      <AddUpdateSnippet></AddUpdateSnippet>\n      <button onClick={(e)=>{getData();}}>Click</button>\n    </div>\n  );\n}\n \nfunction ListOfSnippets(props){\n  return (\n    <Table striped bordered hover>\n      <tr>\n    <th>ID</th>\n    <th>Type</th>\n    <th>Snippet</th>\n  </tr>\n  {\n    props.listOfData.map((data)=> <tr>\n      <td>{data.id}</td>\n      <td>{data.type}</td>\n      <td>{data.snippet}</td>\n      </tr>\n    )\n  }\n</Table>\n  )\n}\n\nfunction AddUpdateSnippet(props){\n  return (\n    <Form>\n      <Form.Group controlId=\"formCodeSnippet\">\n      <Form.Label>Code Snippet</Form.Label>\n      <Form.Control type=\"text\" placeholder=\"Code Snippet\" />\n    </Form.Group>\n    <Form.Group controlId=\"formCodeType\">\n    <Form.Label>Select Code Type</Form.Label>\n    <Form.Control as=\"select\">\n      <option>C</option>\n      <option>C++</option>\n      <option>Java</option>\n    </Form.Control>\n  </Form.Group>\n    </Form>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst listOfData = [\n    [1, 'C', 'My C Code'],\n    [2, 'C++', 'My C++ Code'],\n    [3, 'Java', 'My Java Code']\n];\n\nReactDOM.render(<App listOfData={listOfData}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}